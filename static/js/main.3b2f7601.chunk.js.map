{"version":3,"sources":["logo.svg","components/common/Navbars.js","components/home/HomePage.js","components/users/UsersPage.js","components/users/DetailUserPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbars","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","className","react_router_dom","to","Component","HomePage","UserPage","users","_this2","axios","get","headers","accept","then","res","data","catch","err","console","log","length","src","Fragment","map","user","index","key","id","name","DetailUserPage","match","params","nama","url","App","common_Navbars","react_router","exact","path","component","UsersPage","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b2f7601.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './../../App.css';\r\n\r\nclass Navbars extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Navbar-menu\">\r\n        <ul>\r\n          <li><Link to=\"/\">Home</Link></li>\r\n          <li><Link to=\"/user\">Users</Link></li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbars;","import React, { Component } from 'react';\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <h1>Home Page</h1>\r\n  }\r\n}\r\n\r\nexport default HomePage;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass UserPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      users: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = 'https://jsonplaceholder.typicode.com/users';\r\n\r\n    axios.get(url, {\r\n      headers: {\r\n        accept: 'application/json'\r\n      }\r\n    })\r\n      .then(res => this.setState({ users: res.data }))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    let data = null;\r\n\r\n    if (this.state.users.length === 0) {\r\n      data = <img src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/giphy.gif\" />\r\n    } else {\r\n      const users = this.state.users\r\n\r\n      data = (\r\n        <React.Fragment>\r\n          <h3>List of users</h3>\r\n          <ol>\r\n            {\r\n              users.map((user, index) => {\r\n                return (\r\n                  <li key={index}><Link to={\"/user/\" + user.id}>{user.name}</Link></li>\r\n                )\r\n              })\r\n            }\r\n          </ol>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport default UserPage;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass DetailUserPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      id: props.match.params.nama,\r\n      user: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = 'https://jsonplaceholder.typicode.com/users/' + this.state.id;\r\n\r\n    axios.get(url, {\r\n      headers: {\r\n        accept: 'application/json',\r\n      }\r\n    })\r\n      .then(res => this.setState({ user: res.data }))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    let data = null;\r\n\r\n    if (!this.state.user.name) {\r\n      data = <img src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/giphy.gif\" />\r\n    } else {\r\n      data = <h1>Hallo {this.state.user.name}</h1>\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport default DetailUserPage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport Navbar from './components/common/Navbars';\nimport HomePage from './components/home/HomePage';\nimport UsersPage from './components/users/UsersPage';\nimport DetailUserPage from './components/users/DetailUserPage';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Navbar />\n      <div className=\"mt-3\">\n        <Route exact path='/' component={HomePage} />\n        <Switch>\n          <Route exact path='/user' component={UsersPage} />\n          <Route path='/user/:nama' component={DetailUserPage} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}